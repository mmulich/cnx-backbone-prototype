// Generated by CoffeeScript 1.3.3

/*
  views - This module contains the finite layout classes (views)
          and their controlling logic (e.g. button clicks). These views can
          be used to display a specific contextual layout.

  Author: Michael Mulich
  (C) 2012 Rice University

  This software is subject to the provisions of the GNU Lesser General
  Public License Version 2.1 (LGPL).  See LICENSE.txt for details.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'bootstrap'], function($, _, Backbone) {
    var Casa, EditModule, ToolsActionsViewlet, exports;
    Casa = (function(_super) {

      __extends(Casa, _super);

      function Casa() {
        return Casa.__super__.constructor.apply(this, arguments);
      }

      Casa.prototype.el = $('body');

      Casa.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      Casa.prototype.render = function() {
        return this;
      };

      return Casa;

    })(Backbone.View);
    EditModule = (function(_super) {

      __extends(EditModule, _super);

      function EditModule() {
        return EditModule.__super__.constructor.apply(this, arguments);
      }

      EditModule.prototype.el = $('body');

      EditModule.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      EditModule.prototype.render = function() {
        $('<li class="dropdown">\
          <a id="tools-selection" class="dropdown-toggle" role="button">Tools<b class="caret"></b></a>\
          <ul class="dropdown-menu" role="menu">\
            <li><a tabindex="-1" href="#">Import</a></li>\
            <li><a tabindex="-1" href="#">Preview ...</a></li>\
            <li><a tabindex="-1" href="#">Publish</a></li>\
            <li><a tabindex="-1" href="#">Sharing and Access Management</a></li>\
            <li>\
              <a tabindex="-1" href="#metadata-modal"\
                 id="metadata-link"\
                 data-toggle="modal"\
                 data-target="#metadata-modal">Metadata</a>\
            </li>\
          </ul></li>').appendTo('[role=hud] ul.nav').find('.dropdown-toggle').dropdown();
        $("<div class=\"row-fluid\">           <div class=\"span12\">             <textarea class=\"editable-content\" name=\"content\">" + (this.model.get('content')) + "</textarea>           </div>         </div>").appendTo('[role=main]');
        $('<div><button type="submit" name="save" class="btn btn-primary">Save</button><button type="button" name="cancel" class="btn">Cancel</button>').appendTo('[role=main]');
        return this;
      };

      return EditModule;

    })(Backbone.View);
    /*
        Viewlets
    */

    ToolsActionsViewlet = (function(_super) {

      __extends(ToolsActionsViewlet, _super);

      function ToolsActionsViewlet() {
        return ToolsActionsViewlet.__super__.constructor.apply(this, arguments);
      }

      ToolsActionsViewlet.prototype.initialize = function() {
        _.bindAll(this);
        if (!(this.el != null)) {
          throw new Error("An element must be defined, otherwise we don't know where to put the contents of the viewlet.");
        }
        return this.render();
      };

      ToolsActionsViewlet.prototype.render = function() {
        return this;
      };

      return ToolsActionsViewlet;

    })(Backbone.View);
    exports = {
      Casa: Casa,
      EditModule: EditModule
    };
    return exports;
  });

}).call(this);
